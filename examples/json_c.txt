//

#include "array.h"
#include "hashmap.h"

typedef struct {
  const char *string;
  unsigned length;
} json_string;

typedef struct hashmap_s json_object;
typedef struct array_s json_array;

typedef enum {
  JSON_NULL, JSON_OBJECT, JSON_ARRAY, JSON_STRING, JSON_NUMBER, JSON_BOOL
} json_type;

typedef struct {
  json_type type;
  union {
    json_object object;
    json_array array;
    json_string string;
    double number;
    bool boolean;
  } data;
} json_value;

typedef struct {
  json_string key;
  json_value value;
} json_entry;

//

number // double // ;
string // json_string // ;

value // json_value //
 -> object             // this.type = JSON_OBJECT; this.data.object = _0; //
 -> array              // this.type = JSON_ARRAY; this.data.array = _0; //
 -> string             // this.type = JSON_STRING; this.data.string = _0; //
 -> number             // this.type = JSON_NUMBER; this.data.number = _0; //
 -> "true"             // this.type = JSON_BOOL; this.data.boolean = true; //
 -> "false"            // this.type = JSON_BOOL; this.data.boolean = false; //
 -> "null"             // this.type = JSON_NULL; //
;
object // json_object //
 -> "{" "}"            // this = (json_object){0}; //
 -> "{" members "}"    // this = _1; //
;
members // json_object //
 ->             member // hashmap_create(16, &this); hashmap_put(&this, _0.key.string, _0.key.length, dup(_0.value)); //
 -> members "," member // this = _0; hashmap_put(&this, _2.key.string, _2.key.length, dup(_2.value)); //
;
member // json_entry //
 -> string ":" value   // this = (json_entry){ _0, _2 }; //
;
array // json_array //
 -> "[" "]"            // this = (json_array){0}; //
 -> "[" values "]"     // this = _1; //
;
values // json_array //
 ->            value   // this = array_make(json_value, 16); array_push(this, _0); //
 -> values "," value   // this = _0; array_push(this, _2); //
;
